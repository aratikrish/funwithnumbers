{
  "hash": "2ad54c7e61af9aa752181293544f5858",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Renaming, Relocating & Removing Columns\"\ndate: 05-27-2023\ncategories: [R] # self-defined categories\ndraft: false # setting this to \\`true\\` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\nThe two functions I use to rename columns are dplyr::rename() and dplyr::rename_with()\n\nrename() is good for when you need to manually code in the new name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampledf <- sampledf |> \n  rename(\n    # NEW = OLD\n    country     = country_name,\n    supply_plan = supply_plan_description\n  )\n```\n:::\n\n\nrename_with() is for when you need to use a function to rename columns. For example if you want to pick all columns that end with \"\\_supply_plan\", remove that suffix and add the prefix \"value\\_\" this is what you would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampledf <- sampledf |> \n  rename_with(\n    ~ str_c(\"value_\",\n             str_remove(.x,\"_supply_plan\")\n    ),\n    .cols = ends_with(\"_supply_plan\")\n  )\n```\n:::\n\n\nNote the use of the [tidyselect](https://tidyselect.r-lib.org/reference/language.html) ends_with instead of base R endswith. No difference in this case between the two but the tidyselect function is more versatile as it includes an ignore.case argument.\n\nOlder code often has paste or paste0 to concatenate strings. Here I use stringr::str_c instead.\n\n**Relocating columns** can be done with dplyr::relocate() with [tidy-select](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html).\n\n**Removing columns** is easy with dplyr::select(! column_name)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}