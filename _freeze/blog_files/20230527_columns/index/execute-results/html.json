{
  "hash": "7a08a098fddc4ffc5424b25be08b0eb9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Column Operations\"\ndate: 05-27-2023\ncategories: [R] # self-defined categories\ndraft: false # setting this to \\`true\\` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n#### Renaming Columns\n\nThe two functions I use to rename columns are dplyr::rename() and dplyr::rename_with()\n\nrename() is good for when you need to manually code in the new name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampledf <- sampledf |> \n  rename(\n    # NEW = OLD\n    country     = country_name,\n    supply_plan = supply_plan_description\n  )\n```\n:::\n\n\nrename_with() is for when you need to use a function to rename columns. For example if you want to pick all columns that end with \"\\_supply_plan\", remove that suffix and add the prefix \"value\\_\" this is what you would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampledf <- sampledf |> \n  rename_with(\n    ~ str_c(\"value_\",\n             str_remove(.x,\"_supply_plan\")\n    ),\n    .cols = ends_with(\"_supply_plan\")\n  )\n```\n:::\n\n\nNote the use of the [tidyselect](https://tidyselect.r-lib.org/reference/language.html) ends_with instead of base R endswith. No difference in this case between the two but the tidyselect function is more versatile as it includes an ignore.case argument.\n\nOlder code often has paste or paste0 to concatenate strings. Here I use stringr::str_c instead.\n\n#### **Relocating columns**\n\ncan be done with dplyr::relocate() with [tidy-select](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html).\n\n#### **Removing columns**\n\nis easy with dplyr::select(! column_name)\n\n#### Applying a function to multiple columns\n\nis done using dplyr::across()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampledf <- sampledf |> \n  mutate(across(.cols = im_number:im_funding, \n                .fns = \\(x) str_remove_all(x, \"@|:@\")),\n         \n         across(.cols = where(is.POSIXct), \n                .fns = \\(x) as_date(x))\n  )\n```\n:::\n\n\nNote the use of \\\\(x) instead of the older \\~. to start an unnamed function\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}